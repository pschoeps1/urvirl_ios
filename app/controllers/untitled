def sendMessage(message)
      ref = @ref
      #@name = NSUserDefaults.standardUserDefaults["name"]
      name = @name
      timestamp = (((NSDate.date.timeIntervalSince1970)*1000).round)
      signature = BubbleWrap.create_uuid
      id = @user #NSUserDefaults.standardUserDefaults["id"]
        newobj = ref.push({ name: name, message: message, userId: id, timestamp: timestamp, type: "default" })
        msg = newobj.name
        ref.child(msg).update({ messageId: msg })
        #p ushes message to "queue" branch to initiate push notification
        chat_id = NSUserDefaults.standardUserDefaults["group-chat_id"]
        task = Firebase.alloc.initWithUrl("https://urvirl.firebaseio.com/queue/tasks").child(signature).setValue({ name: name, message: @text_field.text, userId: id, timestamp: timestamp, type: "default", chat_room: chat_id, signature: signature })
        #@text_field.resignFirstResponder
        #@text_field.setText("")
        #@text_field.contentOffset = CGPointMake(0,0)
        #@table.reloadData
        #@text_field.resignFirstResponder
       # original_position = CGRectMake(40, self.view.frame.size.height - 41, self.view.frame.size.width - 80, 40 )
      #CGRectMake ( CGFloat x, CGFloat y, CGFloat width, CGFloat height );
      #[[40, self.view.frame.size.height - 105], [self.view.frame.size.width - 80, 40]]
        #UIView.animateWithDuration(0.5 ,animations: lambda { @text_field.setFrame(original_position) },completion: lambda {|finished| }) 
      
        finishSendingMessage
    end

    def didPressSendButton(button, withMessageText: text)
      JSQSystemSoundPlayer.jsq_playMessageSentSound()
      sendMessage(text)
    end

  def collectionView(collectionView, numberOfItemsInSection: collectionView)
    @messages.count 
  end

  # override func collectionView(collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
   #     return messages.count
   # }

  def collectionView(collectionView, messageDataForItemAtIndexPath: indexPath)
    @messages[indexPath.row]['message']
  end

   #override func collectionView(collectionView: JSQMessagesCollectionView!, messageDataForItemAtIndexPath indexPath: NSIndexPath!) -> JSQMessageData! {
   #     return messages[indexPath.item]
    #}

  def collectionView(collectionView, bubbleImageViewForItemAtIndexPath: indexPath)
    message = @messages[indexPath.row]['message']

    UIImageView(image: incomingBubbleImageView.image, highlightedImage: incomingBubbleImageView.highlightedImage)
  end

  #override func collectionView(collectionView: JSQMessagesCollectionView!, bubbleImageViewForItemAtIndexPath indexPath: NSIndexPath!) -> UIImageView! {
   #     let message = messages[indexPath.item]
        
   #     if message.sender() == sender {
    #        return UIImageView(image: outgoingBubbleImageView.image, highlightedImage: outgoingBubbleImageView.highlightedImage)
    #    }
        
   #     return UIImageView(image: incomingBubbleImageView.image, highlightedImage: incomingBubbleImageView.highlightedImage)
    #}

  def collectionView(collectionView, cellForItemAtIndexPath: indexPath)
    cell = super.collectionView(collectionView, cellForItemAtIndexPath: indexPath)
    message = @messages[indexPath.row]['message']
    
    cell 
  end

   # override func collectionView(collectionView: UICollectionView, cellForItemAtIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {
   #     let cell = super.collectionView(collectionView, cellForItemAtIndexPath: indexPath) as! JSQMessagesCollectionViewCell
        
   #     let message = messages[indexPath.item]
   #     if message.sender() == sender {
    #        cell.textView.textColor = UIColor.blackColor()
   #     } else {
   #         cell.textView.textColor = UIColor.whiteColor()
   #     }
        
   #     let attributes : [NSObject:AnyObject] = [NSForegroundColorAttributeName:cell.textView.textColor, NSUnderlineStyleAttributeName: 1]
   #     cell.textView.linkTextAttributes = attributes
        
   #     //        cell.textView.linkTextAttributes = [NSForegroundColorAttributeName: cell.textView.textColor,
   #     //            NSUnderlineStyleAttributeName: NSUnderlineStyle.StyleSingle]
   #     return cell
   # }
  
  def collectionView(collectionView, attributedTextForMessageBubbleTopLabelAtIndexPath: indexPath)
    message = @messages[indexPath.row]['message']
    NSAttributedString.alloc.initWithString(@messages[indexPath.row]['name'])
  end

  # override func collectionView(collectionView: JSQMessagesCollectionView!, attributedTextForMessageBubbleTopLabelAtIndexPath indexPath: NSIndexPath!) -> NSAttributedString! {
  #      let message = messages[indexPath.item];
        
   #     // Sent by me, skip
  #      if message.sender() == sender {
  #          return nil;
  #      }
        
  #      // Same as previous sender, skip
  #      if indexPath.item > 0 {
  #          let previousMessage = messages[indexPath.item - 1];
  #          if previousMessage.sender() == message.sender() {
  #              return nil;
  #          }
  #      }
        
  #      return NSAttributedString(string:message.sender())
  #  }
 
 def collectionView(collectionView, layout: collectionViewLayout, heightForMessageBubbleTopLabelAtIndexPath: indexPath)
  message = @messages[indexPath.row]['message']

  30
 end

 # override func collectionView(collectionView: JSQMessagesCollectionView!, layout collectionViewLayout: JSQMessagesCollectionViewFlowLayout!, heightForMessageBubbleTopLabelAtIndexPath indexPath: NSIndexPath!) -> CGFloat {
 #       let message = messages[indexPath.item]
        
 #       // Sent by me, skip
 #       if message.sender() == sender {
 #           return CGFloat(0.0);
 #       }
        
 #       // Same as previous sender, skip
 #       if indexPath.item > 0 {
 #           let previousMessage = messages[indexPath.item - 1];
 #           if previousMessage.sender() == message.sender() {
 #               return CGFloat(0.0);
 #           }
 #       }
        
 #       return kJSQMessagesCollectionViewCellLabelHeightDefault
 #   }

  def handle_submission_failed
    App.alert('Something went wrong, please try again.')
  end

  def handle_submission_successful
    App.alert('Thank You, our support team will review this user.')
  end

end